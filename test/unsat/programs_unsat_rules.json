{"test":[
    {
        "problem_path" : "test/unsat/problems/3col_sat.asp",
        "ground_rules" : "",
        "non_ground_rules" : ""

    },
    {
        "problem_path" : "test/unsat/problems/example_sat.asp",
        "ground_rules" : "",
        "non_ground_rules" : ""
    },
    {
        "problem_path" : "test/unsat/problems/hampath.asp",
        "ground_rules" : "",
        "non_ground_rules" : ""
    },
    {
        "problem_path" : "test/unsat/problems/even.asp",
        "ground_rules" : "",
        "non_ground_rules" : ":- not even."
    },
    {
        "problem_path" : "test/unsat/problems/example_built-in.asp",
        "ground_rules" : "d(1) :- c(1), 1 = 2*1-1.:-d(1).d(3) :- c(2), 3 = 2*2-1.:-d(3).a(2) :- b(1), c(1), 2=1+1.:-a(2).a(3) :- b(2), c(1), 3=2+1.:-a(3).a(3) :- b(1), c(2), 3=1+2.:-a(3).a(4) :- b(2), c(2), 4=2+2.:-a(4).",
        "non_ground_rules" : "d(Z) :- c(X), Z = 2*X-1. :-d(X). a(X) :- b(Y), c(Z), X=Y+Z. :-a(K)."
    },
    {
        "problem_path" : "test/unsat/problems/example_unsat_strings.asp",
        "ground_rules" : "a(\"1\") :- b(\"1\").c(\"1\") :- a(\"1\"), b(\"1\").:- c(\"1\").a(\"1\") :- b(\"1\").c(\"1\") :- a(\"1\"), b(\"2\").:- c(\"1\").a(\"1\") :- b(\"1\").c(\"1\") :- a(\"1\"), b(\"3\").:- c(\"1\").a(\"2\") :- b(\"2\").c(\"2\") :- a(\"2\"), b(\"1\").:- c(\"2\").a(\"3\") :- b(\"3\").c(\"3\") :- a(\"3\"), b(\"1\").:- c(\"3\").a(\"2\") :- b(\"2\").c(\"2\") :- a(\"2\"), b(\"2\").:- c(\"2\").a(\"2\") :- b(\"2\").c(\"2\") :- a(\"2\"), b(\"3\").:- c(\"2\").a(\"3\") :- b(\"3\").c(\"3\") :- a(\"3\"), b(\"2\").:- c(\"3\").a(\"3\") :- b(\"3\").c(\"3\") :- a(\"3\"), b(\"3\").:- c(\"3\").",
        "non_ground_rules" : "a(X) :- b(X).c(X) :- a(X), b(Y).:- c(X)."
    },
    {
        "problem_path" : "test/unsat/problems/example_unsat.asp",
        "ground_rules" : "a(1) :- b(1).c(1) :- a(1), b(2), 1 < 2.:- c(1).a(1) :- b(1).c(1) :- a(1), b(3), 1 < 3.:- c(1).a(2) :- b(2).c(2) :- a(2), b(3), 2 < 3.:- c(2).",
        "non_ground_rules" : "a(X) :- b(X). c(X) :- a(X), b(Y), X < Y. :- c(X)."
    },
    {
        "problem_path" : "test/unsat/problems/debug_predicate.asp",
        "ground_rules" : "_debug(1) :- b(1).c(1) :- _debug(1), b(2), 1 < 2.:- c(1)._debug(1) :- b(1).c(1) :- _debug(1), b(3), 1 < 3.:- c(1)._debug(2) :- b(2).c(2) :- _debug(2), b(3), 2 < 3.:- c(2).",
        "non_ground_rules" : "_debug(X) :- b(X). c(X) :- _debug(X), b(Y), X < Y. :- c(X)."
    },
    {
        "problem_path" : "test/unsat/problems/example_unsat_string_in_rules.asp",
        "ground_rules" : "a(\"1\") :- b(\"1\"), d(\"1\", \"try constant in rule X Y\").c(\"1\") :- a(\"1\"), b(\"1\").:- c(\"1\").a(\"1\") :- b(\"1\"), d(\"1\", \"try constant in rule X Y\").c(\"1\") :- a(\"1\"), b(\"2\").:- c(\"1\").a(\"1\") :- b(\"1\"), d(\"1\", \"try constant in rule X Y\").c(\"1\") :- a(\"1\"), b(\"3\").:- c(\"1\").a(\"2\") :- b(\"2\"), d(\"2\", \"try constant in rule\").c(\"2\") :- a(\"2\"), b(\"1\").:- c(\"2\").a(\"2\") :- b(\"2\"), d(\"2\", \"try constant in rule\").c(\"2\") :- a(\"2\"), b(\"2\").:- c(\"2\").a(\"2\") :- b(\"2\"), d(\"2\", \"try constant in rule\").c(\"2\") :- a(\"2\"), b(\"3\").:- c(\"2\").",
        "non_ground_rules" : "a(X) :- b(X), d(X, Y). c(X) :- a(X), b(Y). :- c(X)."
    },
    {
        "problem_path" : "test/unsat/problems/noVar.asp",
        "ground_rules" : "",
        "non_ground_rules" : ":-not a."
    },
    {
        "problem_path" : "test/unsat/problems/multiline.asp",
        "ground_rules" : "",
        "non_ground_rules" : ""
    },
    {
        "problem_path" : "test/unsat/problems/hampath.asp",
        "ground_rules" : "",
        "non_ground_rules" : ""
    },
    {
        "problem_path" : "test/unsat/problems/example_aggregates_strings_sat.asp",
        "ground_rules" : "",
        "non_ground_rules" : ""
    },
    {
        "problem_path" : "test/unsat/problems/example_aggregates_strings_unsat.asp",
        "ground_rules" : "a(3):- b(3), 3>2.:-a(3).",
        "non_ground_rules" : "a(X):- b(X), #count{Y : c(Y, \"string\")}=T, #max{Y: b(Y)} = S, S>T. :-a(X)."
    },
    {
        "problem_path" : "test/unsat/problems/annotations_rules_only.asp",
        "ground_rules" : "adorn_it(1) :- q(1).:- adorn_it(1).adorn_it(2) :- q(2).:- adorn_it(2).adorn_it(3) :- q(3).:- adorn_it(3).adorn_it(4) :- q(4).:- adorn_it(4).",
        "non_ground_rules" : "adorn_it(X) :- q(X). :- adorn_it(X)." 
    }

]}